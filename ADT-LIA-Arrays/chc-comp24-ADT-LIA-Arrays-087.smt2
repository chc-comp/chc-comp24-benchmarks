(set-logic HORN)

(declare-datatypes ((node 0)) (((node  (data Int) (next Int) (prev Int)))))
(declare-datatypes ((HeapObject 0)) (((O_Int  (getInt Int)) (O_UInt  (getUInt Int)) (O_Addr  (getAddr Int)) (O_node  (getnode node)) (defObj ))))
(declare-datatypes ((Heap 0)) (((HeapCtor  (HeapSize Int) (HeapContents (Array Int HeapObject))))))

(declare-fun |inv_main49| ( Heap Int Int Int Int Int Int Int ) Bool)
(declare-fun |inv_main35| ( Heap Int Int Int Int Int Int Int Int ) Bool)
(declare-fun |inv_main50| ( Heap Int Int Int Int Int Int Int ) Bool)
(declare-fun |inv_main12| ( Heap Int Int Int Int Int Int ) Bool)
(declare-fun |inv_main57| ( Heap Int Int Int Int Int ) Bool)
(declare-fun |inv_main40| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main28| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main36| ( Heap Int Int Int Int Int Int Int Int ) Bool)
(declare-fun |inv_main60| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main8| ( Heap Int Int Int Int Int ) Bool)
(declare-fun |inv_main4| ( Heap Int Int ) Bool)
(declare-fun |inv_main19| ( Heap Int Int Int Int Int Int ) Bool)
(declare-fun |inv_main22| ( Heap Int Int Int Int Int Int ) Bool)
(declare-fun |CHC_COMP_FALSE| ( ) Bool)
(declare-fun |inv_main18| ( Heap Int Int Int Int Int Int ) Bool)

(assert
  (forall ( (A Heap) (v_1 Int) (v_2 Int) ) 
    (=>
      (and
        (and (= A (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)))
     (= 2 v_1)
     (= 1 v_2))
      )
      (inv_main4 A v_1 v_2)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Heap) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Heap) ) 
    (=>
      (and
        (inv_main35 S R Q P O N M L K)
        (let ((a!1 (ite (and (not (<= M 0)) (>= (HeapSize S) M))
                (select (HeapContents S) M)
                defObj)))
(let ((a!2 (O_node (node L (next (getnode a!1)) (prev (getnode a!1))))))
(let ((a!3 (ite (and (not (<= M 0)) (>= (HeapSize S) M))
                (HeapCtor (HeapSize S) (store (HeapContents S) M a!2))
                S)))
  (and (= I R)
       (= H Q)
       (= G P)
       (= F O)
       (= E N)
       (= D M)
       (= C L)
       (= B K)
       (= J a!3)
       ((_ is O_node) a!1)
       (= A (+ (- 1) F))))))
      )
      (inv_main28 J I H G A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Heap) ) 
    (=>
      (and
        (inv_main8 G F E D C B)
        (and (not (<= 1 D)) (= A (+ (- 1) F)))
      )
      (inv_main28 G F E B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Heap) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Heap) ) 
    (=>
      (and
        (inv_main49 O N M L K J I H)
        (let ((a!1 (ite (and (not (<= I 0)) (>= (HeapSize O) I))
                (select (HeapContents O) I)
                defObj)))
  (and (not (= G F))
       (= G J)
       (= D N)
       (= C M)
       (= B L)
       (= A K)
       (= E O)
       ((_ is O_node) a!1)
       (= F (data (getnode a!1)))))
      )
      (inv_main60 E D C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Heap) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Heap) ) 
    (=>
      (and
        (inv_main50 R Q P O N M L K)
        (let ((a!1 (ite (and (not (<= L 0)) (>= (HeapSize R) L))
                (select (HeapContents R) L)
                defObj)))
  (and (= H Q)
       (= G P)
       (= F O)
       (= E N)
       (= D M)
       (= C L)
       (= B (next (getnode a!1)))
       (= A (+ (- 1) J))
       (= I R)
       ((_ is O_node) a!1)
       (not (<= 2 J))
       (= J K)))
      )
      (inv_main49 I H G F E D B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Heap) (v_6 Int) (v_7 Int) ) 
    (=>
      (and
        (inv_main40 F E D C B)
        (and (not (<= 1 B)) (<= B 0) (= A (+ B E)) (= v_6 C) (= v_7 B))
      )
      (inv_main49 F E D C B A v_6 v_7)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Heap) ) 
    (=>
      (and
        (inv_main28 F E D C B)
        (and (not (<= 0 B)) (= A (+ (- 1) E)))
      )
      (inv_main40 F E D C A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Heap) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Heap) ) 
    (=>
      (and
        (inv_main49 P O N M L K J I)
        (let ((a!1 (ite (and (not (<= J 0)) (>= (HeapSize P) J))
                (select (HeapContents P) J)
                defObj)))
  (and (= H G)
       (= H K)
       (= E O)
       (= D N)
       (= C M)
       (= B L)
       (= A (+ (- 1) B))
       (= F P)
       ((_ is O_node) a!1)
       (= G (data (getnode a!1)))))
      )
      (inv_main40 F E D C A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F node) (G Heap) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Heap) ) 
    (=>
      (and
        (inv_main8 N M L K J I)
        (let ((a!1 (HeapCtor (+ 1 (HeapSize N))
                     (store (HeapContents N) (+ 1 (HeapSize N)) (O_node F)))))
  (and (= E M)
       (= H (+ 1 (HeapSize N)))
       (= D L)
       (= C K)
       (= B J)
       (= A I)
       (= G a!1)
       (<= 1 K)
       (not (= 0 H))))
      )
      (inv_main12 G E D C B A H)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Heap) ) 
    (=>
      (and
        (inv_main12 H G F E D C B)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize H) B))
                (select (HeapContents H) B)
                defObj)))
(let ((a!2 (O_node (node D (next (getnode a!1)) (prev (getnode a!1))))))
(let ((a!3 (ite (and (not (<= B 0)) (>= (HeapSize H) B))
                (HeapCtor (HeapSize H) (store (HeapContents H) B a!2))
                H)))
  (and ((_ is O_node) a!1) (= A a!3)))))
      )
      (inv_main18 A G F E D C B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Heap) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Heap) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Heap) ) 
    (=>
      (and
        (inv_main57 T S R Q P O)
        (let ((a!1 (ite (and (not (<= O 0)) (>= (HeapSize T) O))
                (select (HeapContents T) O)
                defObj))
      (a!2 (ite (and (not (<= H 0)) (>= (HeapSize M) H))
                (HeapCtor (HeapSize M) (store (HeapContents M) H defObj))
                M)))
  (and (= A H)
       (= K R)
       (not (= N 0))
       (= N G)
       (= L S)
       (= J Q)
       (= I P)
       (= H O)
       (= G (next (getnode a!1)))
       (= E L)
       (= D K)
       (= C J)
       (= F a!2)
       (= M T)
       ((_ is O_node) a!1)
       (= B I)))
      )
      (inv_main57 F E D C B N)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Heap) (v_5 Int) ) 
    (=>
      (and
        (inv_main40 E D C B A)
        (and (not (<= A 0)) (not (= B 0)) (= v_5 B))
      )
      (inv_main57 E D C B A v_5)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Heap) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Heap) ) 
    (=>
      (and
        (inv_main22 O N M L K J I)
        (let ((a!1 (ite (and (not (<= J 0)) (>= (HeapSize O) J))
                (select (HeapContents O) J)
                defObj)))
(let ((a!2 (O_node (node (data (getnode a!1)) (next (getnode a!1)) I))))
(let ((a!3 (ite (and (not (<= J 0)) (>= (HeapSize O) J))
                (HeapCtor (HeapSize O) (store (HeapContents O) J a!2))
                O)))
  (and (= G N)
       (= E L)
       (= D K)
       (= C J)
       (= B I)
       (= A (+ (- 1) E))
       (= H a!3)
       ((_ is O_node) a!1)
       (= F M)))))
      )
      (inv_main8 H G F A D B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Heap) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Heap) ) 
    (=>
      (and
        (inv_main19 O N M L K J I)
        (let ((a!1 (ite (and (not (<= I 0)) (>= (HeapSize O) I))
                (select (HeapContents O) I)
                defObj)))
(let ((a!2 (O_node (node (data (getnode a!1)) (next (getnode a!1)) 0))))
(let ((a!3 (ite (and (not (<= I 0)) (>= (HeapSize O) I))
                (HeapCtor (HeapSize O) (store (HeapContents O) I a!2))
                O)))
  (and (= H 0)
       (= H J)
       (= E M)
       (= D L)
       (= C K)
       (= B I)
       (= A (+ (- 1) D))
       (= G a!3)
       ((_ is O_node) a!1)
       (= F N)))))
      )
      (inv_main8 G F E A C B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) (v_3 Int) (v_4 Int) (v_5 Int) ) 
    (=>
      (and
        (inv_main4 C B A)
        (and (= v_3 B) (= v_4 A) (= 0 v_5))
      )
      (inv_main8 C B A v_3 v_4 v_5)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Heap) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Heap) ) 
    (=>
      (and
        (inv_main36 T S R Q P O N M L)
        (let ((a!1 (ite (and (not (<= N 0)) (>= (HeapSize T) N))
                (select (HeapContents T) N)
                defObj)))
  (and (= A (+ (- 1) K))
       (= K L)
       (= I S)
       (= H R)
       (= G Q)
       (= F P)
       (= E O)
       (= D N)
       (= C M)
       (= J T)
       ((_ is O_node) a!1)
       (not (<= 2 K))
       (= B (next (getnode a!1)))))
      )
      (inv_main35 J I H G F E B C A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Heap) (v_7 Int) (v_8 Int) ) 
    (=>
      (and
        (inv_main28 G F E D C)
        (and (= A (+ C F)) (not (<= 1 C)) (<= 0 C) (= B (+ C F)) (= v_7 D) (= v_8 C))
      )
      (inv_main35 G F E D C B v_7 A v_8)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Heap) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Heap) ) 
    (=>
      (and
        (inv_main50 R Q P O N M L K)
        (let ((a!1 (ite (and (not (<= L 0)) (>= (HeapSize R) L))
                (select (HeapContents R) L)
                defObj)))
  (and (= H Q)
       (= G P)
       (= F O)
       (= E N)
       (= D M)
       (= C L)
       (= B (next (getnode a!1)))
       (= A (+ (- 1) J))
       (= I R)
       ((_ is O_node) a!1)
       (<= 2 J)
       (= J K)))
      )
      (inv_main50 I H G F E D B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Heap) (v_6 Int) (v_7 Int) ) 
    (=>
      (and
        (inv_main40 F E D C B)
        (and (<= 1 B) (<= B 0) (= A (+ B E)) (= v_6 C) (= v_7 B))
      )
      (inv_main50 F E D C B A v_6 v_7)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Heap) ) 
    (=>
      (and
        (inv_main18 H G F E D C B)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize H) B))
                (select (HeapContents H) B)
                defObj)))
(let ((a!2 (O_node (node (data (getnode a!1)) C (prev (getnode a!1))))))
(let ((a!3 (ite (and (not (<= B 0)) (>= (HeapSize H) B))
                (HeapCtor (HeapSize H) (store (HeapContents H) B a!2))
                H)))
  (and ((_ is O_node) a!1) (= A a!3)))))
      )
      (inv_main19 A G F E D C B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Heap) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Heap) ) 
    (=>
      (and
        (inv_main19 N M L K J I H)
        (let ((a!1 (ite (and (not (<= H 0)) (>= (HeapSize N) H))
                (select (HeapContents N) H)
                defObj)))
(let ((a!2 (O_node (node (data (getnode a!1)) (next (getnode a!1)) 0))))
(let ((a!3 (ite (and (not (<= H 0)) (>= (HeapSize N) H))
                (HeapCtor (HeapSize N) (store (HeapContents N) H a!2))
                N)))
  (and (not (= G 0))
       (= G I)
       (= D L)
       (= C K)
       (= B J)
       (= A H)
       (= F a!3)
       ((_ is O_node) a!1)
       (= E M)))))
      )
      (inv_main22 F E D C B G A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Heap) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Heap) ) 
    (=>
      (and
        (inv_main36 T S R Q P O N M L)
        (let ((a!1 (ite (and (not (<= N 0)) (>= (HeapSize T) N))
                (select (HeapContents T) N)
                defObj)))
  (and (= A (+ (- 1) K))
       (= K L)
       (= I S)
       (= H R)
       (= G Q)
       (= F P)
       (= E O)
       (= D N)
       (= C M)
       (= J T)
       ((_ is O_node) a!1)
       (<= 2 K)
       (= B (next (getnode a!1)))))
      )
      (inv_main36 J I H G F E B C A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Heap) (v_7 Int) (v_8 Int) ) 
    (=>
      (and
        (inv_main28 G F E D C)
        (and (= A (+ C F)) (<= 1 C) (<= 0 C) (= B (+ C F)) (= v_7 D) (= v_8 C))
      )
      (inv_main36 G F E D C B v_7 A v_8)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Heap) ) 
    (=>
      (and
        (inv_main12 G F E D C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize G) A))
                (select (HeapContents G) A)
                defObj)))
  (not ((_ is O_node) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Heap) ) 
    (=>
      (and
        (inv_main18 G F E D C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize G) A))
                (select (HeapContents G) A)
                defObj)))
  (not ((_ is O_node) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Heap) ) 
    (=>
      (and
        (inv_main19 G F E D C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize G) A))
                (select (HeapContents G) A)
                defObj)))
  (not ((_ is O_node) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Heap) ) 
    (=>
      (and
        (inv_main22 G F E D C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize G) B))
                (select (HeapContents G) B)
                defObj)))
  (not ((_ is O_node) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Heap) ) 
    (=>
      (and
        (inv_main36 I H G F E D C B A)
        (let ((a!1 (ite (and (not (<= C 0)) (>= (HeapSize I) C))
                (select (HeapContents I) C)
                defObj)))
  (not ((_ is O_node) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Heap) ) 
    (=>
      (and
        (inv_main35 I H G F E D C B A)
        (let ((a!1 (ite (and (not (<= C 0)) (>= (HeapSize I) C))
                (select (HeapContents I) C)
                defObj)))
  (not ((_ is O_node) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Heap) ) 
    (=>
      (and
        (inv_main50 H G F E D C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize H) B))
                (select (HeapContents H) B)
                defObj)))
  (not ((_ is O_node) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Heap) ) 
    (=>
      (and
        (inv_main49 H G F E D C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize H) B))
                (select (HeapContents H) B)
                defObj)))
  (not ((_ is O_node) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Heap) ) 
    (=>
      (and
        (inv_main57 F E D C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize F) A))
                (select (HeapContents F) A)
                defObj)))
  (not ((_ is O_node) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Heap) ) 
    (=>
      (and
        (inv_main60 E D C B A)
        true
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        CHC_COMP_FALSE
      )
      false
    )
  )
)

(check-sat)
(exit)

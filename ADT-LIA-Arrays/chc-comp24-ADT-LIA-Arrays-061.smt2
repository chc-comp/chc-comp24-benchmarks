(set-logic HORN)

(declare-datatypes ((TreeNode 0)) (((TreeNode  (left Int) (right Int)))))
(declare-datatypes ((HeapObject 0)) (((O_Int  (getInt Int)) (O_UInt  (getUInt Int)) (O_Addr  (getAddr Int)) (O_TreeNode  (getTreeNode TreeNode)) (defObj ))))
(declare-datatypes ((Heap 0)) (((HeapCtor  (HeapSize Int) (HeapContents (Array Int HeapObject))))))

(declare-fun |inv_main43| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main55| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main49| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main4| ( Heap Int Int ) Bool)
(declare-fun |inv_main3| ( Heap ) Bool)
(declare-fun |inv_main21| ( Heap Int Int ) Bool)
(declare-fun |inv_main11| ( Heap Int Int ) Bool)
(declare-fun |inv_main27| ( Heap Int Int ) Bool)
(declare-fun |inv_main46| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main28| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main51| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main50| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main6| ( Heap Int Int ) Bool)
(declare-fun |CHC_COMP_FALSE| ( ) Bool)
(declare-fun |inv_main35| ( Heap Int Int ) Bool)
(declare-fun |inv_main37| ( Heap Int Int ) Bool)
(declare-fun |inv_main16| ( Heap Int Int ) Bool)
(declare-fun |inv_main36| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main17| ( Heap Int Int ) Bool)
(declare-fun |inv_main29| ( Heap Int Int ) Bool)
(declare-fun |inv_main58| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main57| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main10| ( Heap Int Int ) Bool)
(declare-fun |inv_main13| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main5| ( Heap Int Int ) Bool)

(assert
  (forall ( (A Heap) ) 
    (=>
      (and
        (= A (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)))
      )
      (inv_main3 A)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main4 D C B)
        (let ((a!1 (ite (and (not (<= C 0)) (>= (HeapSize D) C))
                (select (HeapContents D) C)
                defObj)))
(let ((a!2 (O_TreeNode (TreeNode 0 (right (getTreeNode a!1))))))
(let ((a!3 (ite (and (not (<= C 0)) (>= (HeapSize D) C))
                (HeapCtor (HeapSize D) (store (HeapContents D) C a!2))
                D)))
  (and ((_ is O_TreeNode) a!1) (= A a!3)))))
      )
      (inv_main5 A C B)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main5 D C B)
        (let ((a!1 (ite (and (not (<= C 0)) (>= (HeapSize D) C))
                (select (HeapContents D) C)
                defObj)))
(let ((a!2 (O_TreeNode (TreeNode (left (getTreeNode a!1)) 0))))
(let ((a!3 (ite (and (not (<= C 0)) (>= (HeapSize D) C))
                (HeapCtor (HeapSize D) (store (HeapContents D) C a!2))
                D)))
  (and ((_ is O_TreeNode) a!1) (= A a!3)))))
      )
      (inv_main6 A C B)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main37 D C B)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
(let ((a!2 (not (<= (right (getTreeNode a!1)) 0))))
(let ((a!3 (and a!2 (>= (HeapSize D) (right (getTreeNode a!1))))))
(let ((a!4 (ite a!3 (select (HeapContents D) (right (getTreeNode a!1))) defObj)))
(let ((a!5 (O_TreeNode (TreeNode (left (getTreeNode a!4)) 0))))
(let ((a!6 (HeapCtor (HeapSize D)
                     (store (HeapContents D) (right (getTreeNode a!1)) a!5))))
  (and ((_ is O_TreeNode) a!4) ((_ is O_TreeNode) a!1) (= A (ite a!3 a!6 D)))))))))
      )
      (inv_main6 A C B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) (D Int) (E Int) (F Int) (G Heap) ) 
    (=>
      (and
        (inv_main21 G F E)
        (let ((a!1 (ite (and (not (<= E 0)) (>= (HeapSize G) E))
                (select (HeapContents G) E)
                defObj)))
(let ((a!2 (and (= D 1) (= (right (getTreeNode a!1)) 0)))
      (a!3 (not (= (right (getTreeNode a!1)) 0))))
  (and (= B F)
       (= A E)
       (= C G)
       ((_ is O_TreeNode) a!1)
       (or a!2 (and (= D 0) a!3))
       (= D 0))))
      )
      (inv_main6 C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) (D Int) (E Int) (F Int) (G Int) (H Heap) ) 
    (=>
      (and
        (inv_main21 H G F)
        (let ((a!1 (ite (and (not (<= F 0)) (>= (HeapSize H) F))
                (select (HeapContents H) F)
                defObj)))
(let ((a!2 (and (= D 1) (= (right (getTreeNode a!1)) 0)))
      (a!3 (not (= (right (getTreeNode a!1)) 0))))
  (and (= A F)
       (= E 0)
       (= B G)
       (= C H)
       ((_ is O_TreeNode) a!1)
       (or a!2 (and (= D 0) a!3))
       (not (= D 0)))))
      )
      (inv_main6 C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main10 D C B)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
  (and ((_ is O_TreeNode) a!1) (= A (left (getTreeNode a!1)))))
      )
      (inv_main13 D C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Heap) (C TreeNode) (D Int) (E Int) (F Heap) (G Int) (H Int) (I Int) (J Int) (K Heap) ) 
    (=>
      (and
        (inv_main21 K J I)
        (let ((a!1 (HeapCtor (+ 1 (HeapSize F))
                     (store (HeapContents F) (+ 1 (HeapSize F)) (O_TreeNode C))))
      (a!2 (ite (and (not (<= I 0)) (>= (HeapSize K) I))
                (select (HeapContents K) I)
                defObj)))
(let ((a!3 (and (= G 1) (= (right (getTreeNode a!2)) 0)))
      (a!4 (not (= (right (getTreeNode a!2)) 0))))
  (and (not (= G 0))
       (= D I)
       (not (= H 0))
       (= E J)
       (= B a!1)
       (= F K)
       ((_ is O_TreeNode) a!2)
       (or a!3 (and (= G 0) a!4))
       (= A (+ 1 (HeapSize F))))))
      )
      (inv_main36 B E D A)
    )
  )
)
(assert
  (forall ( (A Int) (B Heap) (C Int) (D TreeNode) (E Heap) ) 
    (=>
      (and
        (inv_main3 E)
        (let ((a!1 (HeapCtor (+ 1 (HeapSize E))
                     (store (HeapContents E) (+ 1 (HeapSize E)) (O_TreeNode D)))))
  (and (= B a!1) (= A (+ 1 (HeapSize E)))))
      )
      (inv_main4 B A C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main49 D C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
(let ((a!2 (not (= (left (getTreeNode a!1)) 0))))
  (and ((_ is O_TreeNode) a!1) a!2)))
      )
      (inv_main50 D C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) (D Int) (E Int) (F Int) (G Int) (H Int) (I Heap) ) 
    (=>
      (and
        (inv_main13 I H G F)
        (let ((a!1 (ite (and (not (<= G 0)) (>= (HeapSize I) G))
                (select (HeapContents I) G)
                defObj)))
  (and (= E 0)
       (= B H)
       (not (= F 0))
       (not (= D 0))
       (= D (right (getTreeNode a!1)))
       (= C I)
       ((_ is O_TreeNode) a!1)
       (= A G)))
      )
      (inv_main17 C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main13 D C B A)
        (= A 0)
      )
      (inv_main11 D C B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) (D Int) (E Int) (F Int) (G Int) (H Heap) ) 
    (=>
      (and
        (inv_main13 H G F E)
        (let ((a!1 (ite (and (not (<= F 0)) (>= (HeapSize H) F))
                (select (HeapContents H) F)
                defObj)))
  (and (= D (right (getTreeNode a!1)))
       (= A F)
       (not (= E 0))
       (= B G)
       (= C H)
       ((_ is O_TreeNode) a!1)
       (= D 0)))
      )
      (inv_main11 C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Heap) ) 
    (=>
      (and
        (inv_main43 E D C B)
        (let ((a!1 (ite (and (not (<= C 0)) (>= (HeapSize E) C))
                (select (HeapContents E) C)
                defObj)))
  (and ((_ is O_TreeNode) a!1) (= A (left (getTreeNode a!1)))))
      )
      (inv_main46 E D C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main55 D C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize D) A))
                (select (HeapContents D) A)
                defObj)))
  (and ((_ is O_TreeNode) a!1) (= B (left (getTreeNode a!1)))))
      )
      (inv_main57 D C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Heap) (v_5 Int) ) 
    (=>
      (and
        (inv_main46 E D C B A)
        (and (not (= A 0)) (= v_5 C))
      )
      (inv_main49 E D C v_5)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) (E Int) (F Int) (G Int) (H Int) (I Int) (J Heap) (v_10 Int) ) 
    (=>
      (and
        (inv_main46 J I H G F)
        (let ((a!1 (ite (and (not (<= H 0)) (>= (HeapSize J) H))
                (select (HeapContents J) H)
                defObj)))
  (and (= B H)
       (= F 0)
       (= C I)
       (not (= E 0))
       (= E (right (getTreeNode a!1)))
       (= D J)
       ((_ is O_TreeNode) a!1)
       (= A G)
       (= v_10 B)))
      )
      (inv_main49 D C B v_10)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) (E Int) (F Int) (G Heap) ) 
    (=>
      (and
        (inv_main16 G F E)
        (let ((a!1 (ite (and (not (<= E 0)) (>= (HeapSize G) E))
                (select (HeapContents G) E)
                defObj)))
  (and (= B E)
       (= A (left (getTreeNode a!1)))
       (= D G)
       ((_ is O_TreeNode) a!1)
       (= C F)))
      )
      (inv_main10 D C A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) (E Int) (F Int) (G Heap) ) 
    (=>
      (and
        (inv_main17 G F E)
        (let ((a!1 (ite (and (not (<= E 0)) (>= (HeapSize G) E))
                (select (HeapContents G) E)
                defObj)))
  (and (= B E)
       (= A (right (getTreeNode a!1)))
       (= D G)
       ((_ is O_TreeNode) a!1)
       (= C F)))
      )
      (inv_main10 D C A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) (v_4 Int) ) 
    (=>
      (and
        (inv_main6 D C B)
        (and (not (= A 0)) (= v_4 C))
      )
      (inv_main10 D C v_4)
    )
  )
)
(assert
  (forall ( (A Int) (B Heap) (C TreeNode) (D Int) (E Int) (F Heap) (G Int) (H Int) (I Int) (J Int) (K Heap) ) 
    (=>
      (and
        (inv_main11 K J I)
        (let ((a!1 (HeapCtor (+ 1 (HeapSize F))
                     (store (HeapContents F) (+ 1 (HeapSize F)) (O_TreeNode C))))
      (a!2 (ite (and (not (<= I 0)) (>= (HeapSize K) I))
                (select (HeapContents K) I)
                defObj)))
(let ((a!3 (and (= G 1) (= (left (getTreeNode a!2)) 0)))
      (a!4 (not (= (left (getTreeNode a!2)) 0))))
  (and (not (= G 0))
       (= D I)
       (not (= H 0))
       (= E J)
       (= B a!1)
       (= F K)
       ((_ is O_TreeNode) a!2)
       (or a!3 (and (= G 0) a!4))
       (= A (+ 1 (HeapSize F))))))
      )
      (inv_main28 B E D A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Heap) ) 
    (=>
      (and
        (inv_main46 J I H G F)
        (let ((a!1 (ite (and (not (<= H 0)) (>= (HeapSize J) H))
                (select (HeapContents J) H)
                defObj)))
  (and (= B I)
       (= F 0)
       (not (= E 0))
       (= E G)
       (= D 0)
       (= D (right (getTreeNode a!1)))
       (= C J)
       ((_ is O_TreeNode) a!1)
       (= A H)))
      )
      (inv_main55 C B A E)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main27 D C B)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
(let ((a!2 (not (<= (left (getTreeNode a!1)) 0))))
(let ((a!3 (and a!2 (>= (HeapSize D) (left (getTreeNode a!1))))))
(let ((a!4 (ite a!3 (select (HeapContents D) (left (getTreeNode a!1))) defObj)))
(let ((a!5 (O_TreeNode (TreeNode 0 (right (getTreeNode a!4))))))
(let ((a!6 (HeapCtor (HeapSize D)
                     (store (HeapContents D) (left (getTreeNode a!1)) a!5))))
  (and ((_ is O_TreeNode) a!4) ((_ is O_TreeNode) a!1) (= A (ite a!3 a!6 D)))))))))
      )
      (inv_main29 A C B)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main35 D C B)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
(let ((a!2 (not (<= (right (getTreeNode a!1)) 0))))
(let ((a!3 (and a!2 (>= (HeapSize D) (right (getTreeNode a!1))))))
(let ((a!4 (ite a!3 (select (HeapContents D) (right (getTreeNode a!1))) defObj)))
(let ((a!5 (O_TreeNode (TreeNode 0 (right (getTreeNode a!4))))))
(let ((a!6 (HeapCtor (HeapSize D)
                     (store (HeapContents D) (right (getTreeNode a!1)) a!5))))
  (and ((_ is O_TreeNode) a!4) ((_ is O_TreeNode) a!1) (= A (ite a!3 a!6 D)))))))))
      )
      (inv_main37 A C B)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C Int) (D Int) (E Heap) ) 
    (=>
      (and
        (inv_main28 E D C B)
        (let ((a!1 (ite (and (not (<= C 0)) (>= (HeapSize E) C))
                (select (HeapContents E) C)
                defObj)))
(let ((a!2 (O_TreeNode (TreeNode B (right (getTreeNode a!1))))))
(let ((a!3 (ite (and (not (<= C 0)) (>= (HeapSize E) C))
                (HeapCtor (HeapSize E) (store (HeapContents E) C a!2))
                E)))
  (and ((_ is O_TreeNode) a!1) (= A a!3)))))
      )
      (inv_main27 A D C)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C Int) (D Int) (E Heap) ) 
    (=>
      (and
        (inv_main36 E D C B)
        (let ((a!1 (ite (and (not (<= C 0)) (>= (HeapSize E) C))
                (select (HeapContents E) C)
                defObj)))
(let ((a!2 (O_TreeNode (TreeNode (left (getTreeNode a!1)) B))))
(let ((a!3 (ite (and (not (<= C 0)) (>= (HeapSize E) C))
                (HeapCtor (HeapSize E) (store (HeapContents E) C a!2))
                E)))
  (and ((_ is O_TreeNode) a!1) (= A a!3)))))
      )
      (inv_main35 A D C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Heap) (F Int) (G Int) (H Int) (I Heap) ) 
    (=>
      (and
        (inv_main50 I H G F)
        (let ((a!1 (ite (and (not (<= G 0)) (>= (HeapSize I) G))
                (select (HeapContents I) G)
                defObj)))
  (and (= B F)
       (= D H)
       (= C G)
       (= E I)
       ((_ is O_TreeNode) a!1)
       (= A (left (getTreeNode a!1)))))
      )
      (inv_main43 E D A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Heap) (F Int) (G Int) (H Int) (I Heap) ) 
    (=>
      (and
        (inv_main51 I H G F)
        (let ((a!1 (ite (and (not (<= G 0)) (>= (HeapSize I) G))
                (select (HeapContents I) G)
                defObj)))
  (and (= B F)
       (= D H)
       (= C G)
       (= E I)
       ((_ is O_TreeNode) a!1)
       (= A (right (getTreeNode a!1)))))
      )
      (inv_main43 E D A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Heap) (G Heap) (H Int) (I Int) (J Int) (K Heap) (v_11 Int) ) 
    (=>
      (and
        (inv_main6 K J I)
        (and (= B 0)
     (= C 0)
     (= D C)
     (not (= H 0))
     (= H J)
     (= E H)
     (= F K)
     (= G F)
     (= A 0)
     (= v_11 E))
      )
      (inv_main43 G E v_11 B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Heap) (F Int) (G Int) (H Int) (I Int) (J Heap) (K Heap) (L Int) (M Int) (N Int) (O Int) (P Heap) (v_16 Int) ) 
    (=>
      (and
        (inv_main57 P O N M)
        (let ((a!1 (ite (and (not (<= M 0)) (>= (HeapSize P) M))
                (select (HeapContents P) M)
                defObj))
      (a!4 (ite (and (not (<= D 0)) (>= (HeapSize E) D))
                (HeapCtor (HeapSize E) (store (HeapContents E) D defObj))
                E)))
(let ((a!2 (O_TreeNode (TreeNode 0 (right (getTreeNode a!1))))))
(let ((a!3 (ite (and (not (<= M 0)) (>= (HeapSize P) M))
                (HeapCtor (HeapSize P) (store (HeapContents P) M a!2))
                P)))
  (and (= C O)
       (= B A)
       (= A M)
       (= F 0)
       (= G D)
       (= H G)
       (not (= L 0))
       (= L C)
       (= I L)
       (= E a!3)
       (= J a!4)
       (= K J)
       ((_ is O_TreeNode) a!1)
       (= D N)
       (= v_16 I)))))
      )
      (inv_main43 K I v_16 F)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Heap) (F Int) (G Int) (H Int) (I Int) (J Heap) (K Heap) (L Int) (M Int) (N Int) (O Int) (P Heap) (v_16 Int) ) 
    (=>
      (and
        (inv_main58 P O N M)
        (let ((a!1 (ite (and (not (<= M 0)) (>= (HeapSize P) M))
                (select (HeapContents P) M)
                defObj))
      (a!4 (ite (and (not (<= D 0)) (>= (HeapSize E) D))
                (HeapCtor (HeapSize E) (store (HeapContents E) D defObj))
                E)))
(let ((a!2 (O_TreeNode (TreeNode (left (getTreeNode a!1)) 0))))
(let ((a!3 (ite (and (not (<= M 0)) (>= (HeapSize P) M))
                (HeapCtor (HeapSize P) (store (HeapContents P) M a!2))
                P)))
  (and (= C O)
       (= B A)
       (= A M)
       (= F 0)
       (= G D)
       (= H G)
       (not (= L 0))
       (= L C)
       (= I L)
       (= E a!3)
       (= J a!4)
       (= K J)
       ((_ is O_TreeNode) a!1)
       (= D N)
       (= v_16 I)))))
      )
      (inv_main43 K I v_16 F)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Heap) (K Int) (L Int) (M Int) (N Int) (O Heap) (P Heap) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Heap) (v_22 Int) ) 
    (=>
      (and
        (inv_main46 V U T S R)
        (let ((a!1 (ite (and (not (<= T 0)) (>= (HeapSize V) T))
                (select (HeapContents V) T)
                defObj))
      (a!2 (ite (and (not (<= I 0)) (>= (HeapSize J) I))
                (HeapCtor (HeapSize J) (store (HeapContents J) I defObj))
                J)))
  (and (= F E)
       (= E 0)
       (= E S)
       (= D 0)
       (= D (right (getTreeNode a!1)))
       (= B U)
       (= A T)
       (= I A)
       (= H 0)
       (= G F)
       (= L I)
       (= M L)
       (= N Q)
       (= R 0)
       (not (= Q 0))
       (= Q H)
       (= J C)
       (= C V)
       (= O a!2)
       (= P O)
       ((_ is O_TreeNode) a!1)
       (= K 0)
       (= v_22 N)))
      )
      (inv_main43 P N v_22 K)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main29 D C B)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
(let ((a!2 (not (<= (left (getTreeNode a!1)) 0))))
(let ((a!3 (and a!2 (>= (HeapSize D) (left (getTreeNode a!1))))))
(let ((a!4 (ite a!3 (select (HeapContents D) (left (getTreeNode a!1))) defObj)))
(let ((a!5 (O_TreeNode (TreeNode (left (getTreeNode a!4)) 0))))
(let ((a!6 (HeapCtor (HeapSize D)
                     (store (HeapContents D) (left (getTreeNode a!1)) a!5))))
  (and ((_ is O_TreeNode) a!4) ((_ is O_TreeNode) a!1) (= A (ite a!3 a!6 D)))))))))
      )
      (inv_main21 A C B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) (D Int) (E Int) (F Int) (G Heap) ) 
    (=>
      (and
        (inv_main11 G F E)
        (let ((a!1 (ite (and (not (<= E 0)) (>= (HeapSize G) E))
                (select (HeapContents G) E)
                defObj)))
(let ((a!2 (and (= D 1) (= (left (getTreeNode a!1)) 0)))
      (a!3 (not (= (left (getTreeNode a!1)) 0))))
  (and (= B F)
       (= A E)
       (= C G)
       ((_ is O_TreeNode) a!1)
       (or a!2 (and (= D 0) a!3))
       (= D 0))))
      )
      (inv_main21 C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) (D Int) (E Int) (F Int) (G Int) (H Heap) ) 
    (=>
      (and
        (inv_main11 H G F)
        (let ((a!1 (ite (and (not (<= F 0)) (>= (HeapSize H) F))
                (select (HeapContents H) F)
                defObj)))
(let ((a!2 (and (= D 1) (= (left (getTreeNode a!1)) 0)))
      (a!3 (not (= (left (getTreeNode a!1)) 0))))
  (and (= A F)
       (= E 0)
       (= B G)
       (= C H)
       ((_ is O_TreeNode) a!1)
       (or a!2 (and (= D 0) a!3))
       (not (= D 0)))))
      )
      (inv_main21 C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main55 D C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize D) A))
                (select (HeapContents D) A)
                defObj)))
(let ((a!2 (not (= B (left (getTreeNode a!1))))))
  (and ((_ is O_TreeNode) a!1) a!2)))
      )
      (inv_main58 D C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main49 D C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
  (and ((_ is O_TreeNode) a!1) (= (left (getTreeNode a!1)) 0)))
      )
      (inv_main51 D C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) (D Int) (E Int) (F Int) (G Int) (H Int) (I Heap) ) 
    (=>
      (and
        (inv_main13 I H G F)
        (let ((a!1 (ite (and (not (<= G 0)) (>= (HeapSize I) G))
                (select (HeapContents I) G)
                defObj)))
  (and (not (= E 0))
       (= B H)
       (not (= F 0))
       (not (= D 0))
       (= D (right (getTreeNode a!1)))
       (= C I)
       ((_ is O_TreeNode) a!1)
       (= A G)))
      )
      (inv_main16 C B A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main4 C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize C) B))
                (select (HeapContents C) B)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main5 C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize C) B))
                (select (HeapContents C) B)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main10 C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize C) A))
                (select (HeapContents C) A)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main13 D C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
  (and (not ((_ is O_TreeNode) a!1)) (not (= A 0))))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main16 C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize C) A))
                (select (HeapContents C) A)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main17 C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize C) A))
                (select (HeapContents C) A)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main11 C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize C) A))
                (select (HeapContents C) A)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main28 D C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main27 C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize C) A))
                (select (HeapContents C) A)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main27 C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize C) A))
                (select (HeapContents C) A)
                defObj)))
(let ((a!2 (not (<= (left (getTreeNode a!1)) 0))))
(let ((a!3 (and a!2 (>= (HeapSize C) (left (getTreeNode a!1))))))
(let ((a!4 (ite a!3 (select (HeapContents C) (left (getTreeNode a!1))) defObj)))
  (and ((_ is O_TreeNode) a!1) (not ((_ is O_TreeNode) a!4)))))))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main29 C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize C) A))
                (select (HeapContents C) A)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main29 C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize C) A))
                (select (HeapContents C) A)
                defObj)))
(let ((a!2 (not (<= (left (getTreeNode a!1)) 0))))
(let ((a!3 (and a!2 (>= (HeapSize C) (left (getTreeNode a!1))))))
(let ((a!4 (ite a!3 (select (HeapContents C) (left (getTreeNode a!1))) defObj)))
  (and ((_ is O_TreeNode) a!1) (not ((_ is O_TreeNode) a!4)))))))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main21 C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize C) A))
                (select (HeapContents C) A)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main36 D C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main35 C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize C) A))
                (select (HeapContents C) A)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main35 C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize C) A))
                (select (HeapContents C) A)
                defObj)))
(let ((a!2 (not (<= (right (getTreeNode a!1)) 0))))
(let ((a!3 (and a!2 (>= (HeapSize C) (right (getTreeNode a!1))))))
(let ((a!4 (ite a!3 (select (HeapContents C) (right (getTreeNode a!1))) defObj)))
  (and ((_ is O_TreeNode) a!1) (not ((_ is O_TreeNode) a!4)))))))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main37 C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize C) A))
                (select (HeapContents C) A)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Heap) ) 
    (=>
      (and
        (inv_main37 C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize C) A))
                (select (HeapContents C) A)
                defObj)))
(let ((a!2 (not (<= (right (getTreeNode a!1)) 0))))
(let ((a!3 (and a!2 (>= (HeapSize C) (right (getTreeNode a!1))))))
(let ((a!4 (ite a!3 (select (HeapContents C) (right (getTreeNode a!1))) defObj)))
  (and ((_ is O_TreeNode) a!1) (not ((_ is O_TreeNode) a!4)))))))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main43 D C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Heap) ) 
    (=>
      (and
        (inv_main46 E D C B A)
        (let ((a!1 (ite (and (not (<= C 0)) (>= (HeapSize E) C))
                (select (HeapContents E) C)
                defObj)))
  (and (not ((_ is O_TreeNode) a!1)) (= A 0)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main49 D C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main50 D C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main51 D C B A)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize D) B))
                (select (HeapContents D) B)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main55 D C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize D) A))
                (select (HeapContents D) A)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main57 D C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize D) A))
                (select (HeapContents D) A)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Heap) ) 
    (=>
      (and
        (inv_main58 D C B A)
        (let ((a!1 (ite (and (not (<= A 0)) (>= (HeapSize D) A))
                (select (HeapContents D) A)
                defObj)))
  (not ((_ is O_TreeNode) a!1)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        CHC_COMP_FALSE
      )
      false
    )
  )
)

(check-sat)
(exit)
